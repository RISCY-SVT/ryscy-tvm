#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
04-compile_onnx_to_th1520.py

ONNX ‚Üí TVM Relax (v0.20) ‚Üí RISC-V RVV (Clang/LLVM) shared library.
–ü–µ—Ä–µ–¥ –ª–∏–Ω–∫–æ–≤–∫–æ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π C-–∫–æ–¥.
"""

import argparse
import json
import os
import pathlib
import shutil
import subprocess
import onnx
import numpy as np
import tvm
from tvm import relax
from tvm.driver import build_module
from tvm.driver.build_module import compile as tvm_compile
from tvm.contrib import cc
from onnx import helper, numpy_helper

# ------------------------------------------------------------------------
def tensorize_all_scalars(model: onnx.ModelProto) -> onnx.ModelProto:
    """
    –í OLDER ONNX: –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–∫–∞–ª—è—Ä–Ω—ã–µ Constant (value_float/int / value_floats/ints len==1)
    –Ω–∞ rank-1 —Ç–µ–Ω–∑–æ—Ä shape=[1], —á—Ç–æ–±—ã Relax.floor() –∏ –¥—Ä. –≤–∏–¥–µ–ª–∏ Tensor, –∞ –Ω–µ PrimValue.
    """
    for node in model.graph.node:
        if node.op_type != "Constant":
            continue
        to_remove = []
        new_tensor = None
        for attr in list(node.attribute):
            # float/int scalar
            if attr.name == "value_float":
                arr = np.array([attr.f], dtype="float32")
                new_tensor = numpy_helper.from_array(arr)
                to_remove.append(attr)
            elif attr.name == "value_int":
                arr = np.array([attr.i], dtype="int64")
                new_tensor = numpy_helper.from_array(arr)
                to_remove.append(attr)
            # list of floats/ints, length==1
            elif attr.name == "value_floats" and len(attr.floats) == 1:
                arr = np.array([attr.floats[0]], dtype="float32")
                new_tensor = numpy_helper.from_array(arr)
                to_remove.append(attr)
            elif attr.name == "value_ints" and len(attr.ints) == 1:
                arr = np.array([attr.ints[0]], dtype="int64")
                new_tensor = numpy_helper.from_array(arr)
                to_remove.append(attr)
            # already TensorProto rank-0
            elif attr.name == "value" and attr.t.dims == []:
                arr = numpy_helper.to_array(attr.t)
                arr = arr.reshape(1)
                new_tensor = numpy_helper.from_array(arr)
                to_remove.append(attr)
        if new_tensor is not None:
            # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            for a in to_remove:
                node.attribute.remove(a)
            # –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
            node.attribute.extend([helper.make_attribute("value", new_tensor)])
    onnx.checker.check_model(model)
    return model

# ------------------------------------------------------------------------
def get_args():
    P = argparse.ArgumentParser(
        description="Compile ONNX ‚Üí Relax (TVM v0.20) ‚Üí RISC-V RVV via Clang/LLVM"
    )
    P.add_argument("model", help="–ø—É—Ç—å –∫ ONNX-–º–æ–¥–µ–ª–∏ (static/dynamic)")
    P.add_argument("--input-name", default="images")
    P.add_argument("--input-shape", nargs=4, type=int,
                   default=[1,3,640,640], metavar=("N","C","H","W"))
    P.add_argument("--dtype",    default="float32")
    P.add_argument("--out-dir",  default="build_th1520")
    return P.parse_args()

# ------------------------------------------------------------------------
def main():
    args = get_args()
    onnx_path = pathlib.Path(args.model).resolve()
    out_dir   = pathlib.Path(args.out_dir).resolve()
    out_dir.mkdir(parents=True, exist_ok=True)

    print(f"‚è≥  Loading ONNX model: {onnx_path.name}")
    model = onnx.load(str(onnx_path))
    print("üîß  Tensorizing all scalar Constants ‚Ä¶")
    model = tensorize_all_scalars(model)

    # ------------------- ONNX ‚Üí Relax -------------------
    from tvm.relax.frontend.onnx import from_onnx
    sd = {args.input_name: tuple(args.input_shape)}
    dd = {args.input_name: args.dtype}

    print("üîÑ  Converting ONNX ‚Üí Relax ‚Ä¶")
    mod = from_onnx(model, shape_dict=sd, dtype_dict=dd)
    mod, params = relax.frontend.detach_params(mod)

    # ------------------- –í—ã–±–æ—Ä —Ç–∞—Ä–≥–µ—Ç–∞: LLVM/Clang –¥–ª—è RISC-V RVV -------------
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º YOUR LLVM-RVV-Clang 16.0.0 –≤ /opt/riscv/bin
    target = tvm.target.Target(
        "llvm"
        " -mtriple=riscv64-unknown-linux-gnu"
        " -mcpu=generic-rv64"
        " -mattr=+m,+v,+zfh"
    )

    print("‚öôÔ∏è  Compiling Relax ‚Üí Executable ‚Ä¶")
    exe = tvm_compile(
        mod,
        target,                         # –≤–∞—à Target
        relax_pipeline="default",      # pipeline –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Relax
        tir_pipeline="default"         # pipeline –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è TIR
    )

    # ------------------- –≠–∫—Å–ø–æ—Ä—Ç .so —Å –ø—Ä–µ–¥—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º C-–∫–æ–¥–∞ ----------------
    stem = onnx_path.stem + "_th1520"
    so_path = out_dir / (stem + ".so")

    # —Ñ–ª–∞–≥–∏ –¥–ª—è Clang+LLD
    clang = "/opt/riscv/bin/clang"
    llvm_config = "/opt/riscv/bin/llvm-config"
    # include –æ—Ç TVM –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    tvm_home = os.environ.get("TVM_HOME", "")
    SYSROOT = "/opt/riscv/sysroot"
    
    # –ü—É—Ç–∏ –≤–∫–ª—é—á–µ–Ω–∏–π TVM
    incs = [
        f"-I{tvm_home}/include",
        f"-I{tvm_home}/3rdparty/dlpack/include",
        f"-I{tvm_home}/3rdparty/dmlc-core/include",
    ]
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è Clang+LLD
    # –ü—É—Ç—å –∫ CRT –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ ISA
    crt_dir = f"{SYSROOT}/usr/lib64v0p7_xthead/lp64d"
    
    clang_opts = [
        "--target=riscv64-unknown-linux-gnu",
        f"--sysroot={SYSROOT}",
        "-nostdlib",                                # —Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞ CRT –≤–Ω–µ sysroot
        f"-B{crt_dir}",                             # –∏—Å–∫–∞—Ç—å CRT –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å
        "-fPIC", "-shared",
        "-march=rv64gcv_zfh_xtheadc",
        "-mabi=lp64d",
        "-fuse-ld=lld",
        # explicit CRT order:
        f"{crt_dir}/crti.o",
        # –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–µ –ø—É—Ç–∏
        f"-L{tvm_home}/build-riscv",
        "-ltvm_runtime",
        # –≤–∞—à–∏ object files (lib0.o, devc.o) –¥–æ–±–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # –≤ –∫–æ–Ω—Ü–µ CRT –∫–æ–Ω—Ü–∞
        f"{crt_dir}/crtn.o",
    ] + incs
    
    # clang_opts = []
    # for d in inc_dirs:
    #     clang_opts.append(f"-I{d}")                        # –∑–∞–≥–æ–ª–æ–≤–∫–∏ TVM :contentReference[oaicite:5]{index=5}
    # clang_opts += [
    #     "--target=riscv64-unknown-linux-gnu",               # —Ç—Ä–∏–ø–ª –¥–ª—è RISCV :contentReference[oaicite:6]{index=6}
    #     "-march=rv64gcv_zfh",                            # RVV 0.7 + zfh + xtheadc :contentReference[oaicite:7]{index=7}
    #     f"--sysroot=/opt/riscv/sysroot",                   # –≥–¥–µ –∏—Å–∫–∞—Ç—å libc, libgcc –∏ –ø—Ä.  :contentReference[oaicite:1]{index=1}
    #     f"--gcc-toolchain=/opt/riscv",                    # —É–∫–∞–∑—ã–≤–∞–µ–º gcc-toolchain –¥–ª—è LLD  :contentReference[oaicite:2]{index=2}
    #     "-mabi=lp64d",                                      # ABI
    #     "-fPIC",                                            # –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∫–æ–¥
    #     "-shared",                                          # —Å–æ–∑–¥–∞—ë–º .so
    #     "-v",
    #     "-fuse-ld=lld",                                     # –∏—Å–ø–æ–ª—å–∑—É–µ–º LLD, —É–º–µ—é—â–∏–π RVV1.0 –∞—Ç—Ä–∏–±—É—Ç—ã :contentReference[oaicite:8]{index=8}
    #     f"-L{tvm_home}/build-riscv",                        # –ø—É—Ç—å –∫ libtvm_runtime.so
    #     "-ltvm_runtime",                                    # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–Ω—Ç–∞–π–º–∞ :contentReference[oaicite:9]{index=9}
    #     # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ:
    #     # "-Wl,-rpath,$ORIGIN",                             # —á—Ç–æ–±—ã .so –∏—Å–∫–∞–ª —Ä—É—Ç–∞–π–º—ã —Ä—è–¥–æ–º
    # ]

    # clang_opts = []
    # for d in inc_dirs:
    #     clang_opts.append(f"-I{d}")
    # clang_opts += [
    #     "-target", "riscv64-unknown-linux-gnu",    # clang-specific
    #     "-march=rv64gcmv0p7_zfh",
    #     "-mabi=lp64d",
    #     "-fPIC",
    #     "-shared",
    #     "-v",
    #     f"-L{os.path.join(tvm_home, 'build-riscv')}",
    #     "-ltvm_runtime"
    # ]

    def my_fcompile(lib_name, object_files, **kwargs):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π C-–∫–æ–¥ (.c) –∏ –ø–æ—Ç–æ–º –ª–∏–Ω–∫—É–µ–º Clang.
        object_files –æ–±—ã—á–Ω–æ: ['/tmp/.../lib0.c', '/tmp/.../devc.o']
        """
        # –∏—â–µ–º lib0.c (–æ—Å–Ω–æ–≤–Ω–æ–π –°-–∫–æ–¥)
        print(f"Looking fo .c in {object_files}")
        for f in object_files:
            if f.endswith(".c"):
                dst = out_dir / (stem + ".c")
                shutil.copy(f, dst)
                print(f"üìÑ  Generated C code saved to {dst}")
                # break
        
        # —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω—ã–π –ª–∏–Ω–∫–æ–≤—â–∏–∫
        return cc.create_shared(
            lib_name,
            object_files,
            cc=clang,
            options=clang_opts
        )

    print("üöö  Exporting shared library ‚Ä¶")
    exe.export_library(str(so_path), fcompile=my_fcompile)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
    meta = {
        "tvm_version": tvm.__version__,
        "onnx_file": str(onnx_path),
        "input_name": args.input_name,
        "input_shape": args.input_shape,
        "dtype": args.dtype,
        "target": str(target),
        "clang": clang,
        "clang_opts": clang_opts,
        "library": so_path.name
    }
    with open(out_dir / "meta.json", "w") as f:
        json.dump(meta, f, indent=2)

    print("\n‚úÖ  Build complete.")
    print(" ‚Ä¢", so_path)
    print(" ‚Ä¢", (out_dir / (stem + ".c")))
    print(f"\nüöÄ  –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ –ø–ª–∞—Ç—É:\n  scp {so_path} root@lichee:/opt/models/")

if __name__ == "__main__":
    main()
